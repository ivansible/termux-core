---
- name: configure ssh daemon
  template:
    src: termux/sshd.config
    dest: "{{ termux_root_dir }}/usr/etc/ssh/sshd_config"
    mode: 0644

- name: create host marker
  copy:
    content: "{{ inventory_hostname }}"
    dest: "{{ ansible_user_dir }}/{{ inventory_hostname }}"
    force: true
    mode: 0644

- name: setup storage if not docker test
  block:
    - name: setup storage
      command:
        cmd: termux-setup-storage
        creates: "{{ ansible_user_dir }}/storage"

    - name: check setup storage restults
      stat:
        path: "{{ ansible_user_dir }}/storage"
      register: _storage_dir

    - name: print storage access warning
      debug:
        msg: "**** Please allow termux to access storage ****"
      when: not _storage_dir.stat.exists
  when: ansible_connection != 'docker'

- name: create new user profile
  copy:
    dest: "{{ ansible_user_dir }}/.profile"
    content: |
      #!{{ termux_root_dir }}/usr/bin/sh
    force: false
    mode: 0644

- name: make aliases in user profile, add /system/bin on PATH
  blockinfile:
    path: "{{ ansible_user_dir }}/.profile"
    block: "{{ lookup('template', 'termux/profile-aliases.sh') }}"

- name: customize tmux
  lineinfile:
    path: "{{ ansible_user_dir }}/.tmux.conf"
    line: "{{ item }}"
    create: true
    mode: 0644
  loop: "{{ termux_tmux_options }}"


- name: authorize new public ssh keys
  authorized_key:
    user: root  # android users are 'fake'
    manage_dir: false
    path: "{{ ansible_user_dir }}/.ssh/authorized_keys"
    key: "{{ lookup('pipe', keygen_cmd) }}"
    comment: "{{ key_name }}"
    state: present
  vars:
    key_name: "{{ item |basename |regex_replace('[.]key$') }}"
    ## use '&&' in the pipe to fail on chmod errors
    keygen_cmd: 'chmod 600 "{{ item }}" && ssh-keygen -y -f "{{ item }}"'
  loop: "{{ termux_ssh_keys_accept }}"
  loop_control:
    label: "{{ key_name }}"

- name: make stub authorized keys if none were provided
  copy:
    dest: "{{ ansible_user_dir }}/.ssh/authorized_keys"
    content: ""
    mode: 0600
    force: false

- name: revoke obsolete public ssh keys
  authorized_key:
    user: root
    manage_dir: false
    path: "{{ ansible_user_dir }}/.ssh/authorized_keys"
    key: "{{ lookup('pipe', keygen_cmd) }}"
    state: absent
  vars:
    key_name: "{{ item |basename |regex_replace('[.]key$') }}"
    keygen_cmd: 'chmod 600 "{{ item }}" && ssh-keygen -y -f "{{ item }}"'
  loop: "{{ termux_ssh_keys_revoke }}"
  loop_control:
    label: "{{ key_name }}"

- name: install new private ssh keys
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_user_dir }}/.ssh"
    mode: 0600
  loop: "{{ termux_ssh_keys_deploy }}"
  loop_control:
    label: "{{ item |basename }}"

- name: remove obsolete private ssh keys
  file:
    path: "{{ ansible_user_dir }}/.ssh/{{ item |basename }}"
    state: absent
  loop: "{{ termux_ssh_keys_revoke }}"
  loop_control:
    label: "{{ item |basename }}"


- name: configure ssh
  blockinfile:
    path: "{{ ansible_user_dir }}/.ssh/config"
    block: "{{ lookup('template', 'termux/ssh.aliases') }}"
    create: true
    mode: 0600
...
