---
## adopted from https://github.com/Neo-Oli/termux-ubuntu/blob/master/ubuntu.sh

- name: install proot
  command:
    cmd: "pkg install proot wget"
    stdin: "{{ termux_pkg_confirm }}"
  environment:
    DEBIAN_FRONTEND: noninteractive
  register: pkg_result
  changed_when: pkg_result.stdout |default('') is search(termux_pkg_changed)

- name: create directory for ubuntu proot
  file:
    state: directory
    path: "{{ ubuntu_fs }}"

- name: add image host to dns resolver in docker termux
  ## add image host name in static hosts, see:
  ## https://github.com/xeffyr/termux-docker#known-issues
  block:
    - name: add static hostname in docker termux
      lineinfile:
        path: /system/etc/static-dns-hosts.txt
        line: "{{ image_host }}"
        ## docker does not allow atomic updates of /etc/hosts
        ## see https://github.com/ansible/ansible/issues/13981
        ## see https://docs.docker.com/network/bridge/#differences-between-user-defined-bridges-and-the-default-bridge
        unsafe_writes: true
      register: _static_dns_hosts

    - name: update static dns in docker termux
      command: /system/bin/update-static-dns
      when: _static_dns_hosts is changed
  when: ansible_connection == 'docker'

- name: download ubuntu image
  shell:
    cmd: |
      case $(dpkg --print-architecture) in
        aarch64)  arch="arm64" ;;
        arm)      arch="armhf" ;;
        amd64)    arch="amd64" ;;
        i*86)     arch="i386"  ;;
        x86_64)   arch="amd64" ;;
        *)        echo "unknown architecture"; exit 1 ;;
      esac
      wget -nv -O "{{ tarball }}" "{{ url }}"
    creates: "{{ tarball }}"
  vars:
    base_url: "https://{{ image_host }}/core/{{ codename }}/current"
    url: "{{ base_url }}/ubuntu-{{ codename }}-core-cloudimg-${arch}-root.tar.gz"

- name: decompress ubuntu image
  command:
    cmd: proot --link2symlink tar -xf "{{ tarball }}" --exclude=dev
    chdir: "{{ ubuntu_fs }}"
    creates: "{{ ubuntu_fs }}/bin/bash"


- name: fix nameserver so ubuntu can connect to the internet
  lineinfile:
    path: "{{ ubuntu_fs }}/etc/resolv.conf"
    line: "nameserver {{ termux_ubuntu_nameserver }}"

- name: fix sudo issue "unable to resolve host localhost"
  lineinfile:
    path: "{{ ubuntu_fs }}/etc/hosts"
    line: '127.0.0.1 localhost'

- name: fix sudo issue "unable to send audit message"
  copy:
    src: noaudit/noaudit.aarch64.so
    dest: "{{ ubuntu_fs }}/lib/noaudit.aarch64.so"
    mode: 0755
  when: termux_ubuntu_noaudit_all |bool
        or termux_ubuntu_noaudit_ssh |bool
        or true  # FIXME

- name: fix problems with chfn in proot ubuntu
  ## see:
  ## https://stackoverflow.com/questions/25193161/chfn-pam-system-error-intermittently-in-docker-hub-builds
  ## https://github.com/Neo-Oli/termux-ubuntu/issues/42
  file:
    state: link
    src: /bin/true
    dest: "{{ ubuntu_fs }}/usr/bin/chfn"
    force: true

- name: create proot launch script
  template:
    src: ubuntu/start-script.sh
    dest: "{{ start_script }}"
    mode: 0750


- name: install core ubuntu packages (long task, errors will be fixed)
  command:
    cmd: "{{ start_script }} '{{ cmd }}'"
    creates: "{{ ubuntu_fs }}{{ termux_ubuntu_core_creates }}"
  vars:
    cmd: "apt-get -qy update; apt-get -qy install {{ core_packages_args }}"
  register: _apt_result
  ignore_errors: true

- name: fix systemd install issues
  block:
    - name: fix chfn issue with systemd-network user
      lineinfile:
        path: "{{ systemd_postinst }}"
        regexp: '^(.*--gecos "systemd Network Management" systemd-network)\s*$'
        line: '\1 || true'
        backrefs: true
        when: stdout is search('chfn -f systemd Network Management .* returned error')

    - name: fix chfn issue with systemd-resolver user
      lineinfile:
        path: "{{ systemd_postinst }}"
        regexp: '^(.*--gecos "systemd Resolver" systemd-resolve)\s*$'
        line: '\1 || true'
        backrefs: true
        when: stdout is search('chfn -f systemd Resolver .* returned error')

    - name: fix systemd issue with stub-resolv.conf
      lineinfile:
        path: "{{ systemd_postinst }}"
        regexp: '^(\s*cp /etc/resolv.conf .*/stub-resolv.conf)\s*$'
        line: '\1 || true'
        backrefs: true
        when: stdout is search('/etc/resolv.conf.* are the same file')

    - name: retry installing core packages in proot ubuntu
      command: "{{ start_script }} '{{ cmd }}'"
      vars:
        cmd: "apt-get -qy update; apt-get -qy install {{ core_packages_args }}"
      register: _apt_result

  ## end of block
  vars:
    systemd_postinst: "{{ ubuntu_fs }}/var/lib/dpkg/info/systemd.postinst"
    stdout: "{{ _apt_result.stdout |default('') }}"
  when: stdout is search('error processing package systemd|Affected packages. systemd')


- name: create non-root ubuntu user
  command:
    cmd: "{{ start_script }} '{{ cmd }}'"
    stdin: "{{ termux_pkg_confirm }}"
    creates: "{{ ubuntu_fs }}{{ termux_ubuntu_home }}"
  vars:
    cmd:
      adduser
        --quiet
        --disabled-password
        --home "{{ termux_ubuntu_home }}"
        --gecos "{{ termux_ubuntu_user }}"
        --shell /bin/bash
        "{{ termux_ubuntu_user }}"

- name: enable sudo for non-root ubuntu user
  copy:
    dest: "{{ ubuntu_fs }}/etc/sudoers.d/99-nopasswd"
    content: |
      # ansible-managed
      %sudo ALL=(ALL) NOPASSWD:ALL
      {{ termux_ubuntu_user }} ALL=(ALL) NOPASSWD:ALL
    mode: 0640


- name: authorize ssh keys with ubuntu users
  authorized_key:
    user: root  # fake user to avoid error in ansible module
    manage_dir: false
    path: "{{ ubuntu_fs }}/{{ item.0 }}/.ssh/authorized_keys"
    key: "{{ lookup('pipe', keygen_cmd) }}"
    comment: "{{ item.1 |basename |regex_replace('[.]key$') }}"
  vars:
    # use '&&' in the pipe to fail on chmod errors
    keygen_cmd: 'chmod 600 "{{ item.1 }}" && ssh-keygen -y -f "{{ item.1 }}"'
    homes:
      - /root
      - "{{ termux_ubuntu_home }}"
  loop: "{{ homes |product(termux_authorized_ssh_keys) |list }}"
  loop_control:
    label: "{{ item.1 |basename }} -> {{ item.0 |basename }}"

- name: configure sshd in proot ubuntu
  template:
    src: ubuntu/sshd.config
    dest: "{{ ubuntu_fs }}/etc/ssh/sshd_config"
  register: _sshd_config

- name: fix ssh issue "linux_audit_write_entry failed"
  lineinfile:
    path: "{{ ubuntu_fs }}/etc/default/ssh"
    line: "{{ comment }}{{ line }}"
    regexp: "{{ line }}"
  vars:
    line: 'export LD_PRELOAD=/lib/noaudit.aarch64.so'
    comment: "{{ termux_ubuntu_noaudit_ssh |bool |ternary('','#') }}"
  register: _sshd_defaults

- name: restart sshd in proot ubuntu
  command: "{{ termux_ubuntu_start_script }} '/etc/init.d/ssh restart'"
  when: _sshd_config is changed
        or _sshd_defaults is changed
  ## workaround for hung init.s script
  async: 10
  poll: 0
...
